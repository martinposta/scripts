//---------------------------------------------------------------------------
// cr_charUtilsLib.mel - MEL Script
//---------------------------------------------------------------------------
//Copyright (c) 2010 Wasim Khan creaturerigs.com 
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of
//this software and associated documentation files (the "Software"), to deal in
//the Software without restriction, including without limitation the rights to
//use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
//the Software, and to permit persons to whom the Software is furnished to do so,
//subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// DESCRIPTION:
//      Character rig utility library
//
// REQUIRES:
//      Nothing
//
// AUTHOR:
//      Wasim Khan - wasim.cg@gmail.com
//      cr_quickZeroOut()cr_getStretchAxis Based on code by Michael B. Comet
//----------------------------------------------------------------------------

//dummy proc used to load this script without sourcing it
global proc cr_charUtilsLib()
{
return;
}

/*
     INPUTS:
        $n        >> object hierarchy to duplicate  ("joint1")
        $prePost  >> prefix / suffix
        $id       >> prefix / suffix for given character

(i.e) cr_dupId("joint1", "prefix", "FK");
*/
global proc string[] cr_dupId(string $n, string $prePost, string $id )
{
string $newDup[];
string $sel[];          // array to hold selected objects
string $shortName[];    //
string $dagPath;        //
string $fullchain[];    //
int $size;

// check for selection
    if ($n=="")
    $sel =`ls -sl`;
    else
    $sel[0] = $n;

$fullchain = `cr_listHierarchy $sel[0]`;
$newDup = `duplicate -rc $sel`;
$size = `size($newDup)`;

    // check for short names for selected object
    for($c=0;$c<$size;$c++)
    {
        $dagPath = $fullchain[$c];
        $shortName[$c] = `match "[^|]*$" $dagPath`;

        //print ("\n"+$shortName[$c]);
    }

    for($i=0;$i<$size;$i++)
    {
            // rename new joints based on old joints
            if($prePost=="prefix")
        {
        $newDup[$i] = `rename $newDup[$i] ($id+"_"+$shortName[$i])`;
        //print ("\n"+$shortName[$i]+" Renamed to ---> "+$newDup[$i]);
        }
            if($prePost=="suffix")
        {
        $newDup[$i] = `rename $newDup[$i] ($shortName[$i]+"_"+$id)`;
        //print ("\n"+$shortName[$i]+" Renamed to ---> "+$newDup[$i]);
        }


    }

    //print ("\nRENAMING SUCCESSFUL!!!  (see script editor for instructions and details)\n");

    return $newDup;

}


// code based on Hamish McKenzie return revrse array value
global proc string[] cr_reverseArray(string $array[] )
{
string $reversedArray[];
int $arraySize = `size $array`;

for( $n = 0; $n < $arraySize; $n++ )
$reversedArray[( $arraySize - 1 - $n )] = $array[$n];
return $reversedArray;
}


/*   create all needed fk ik connections for given joint
     INPUTS:
        $jnt 				>> object to create fk ik connection ("joint1")
        $IK					>> ik joint hierarchy
        $FK					>> fk joint hierarchy
        $type       >> type of connection ("utilities / constraint")
        $controller >> object to create fk ik control attribute

 (i.e) cr_fkIkConnect("joint1", "IK_joint1", "FK_joint1", "utilNods", "fkIk_anim");
 */

global proc cr_fkIkConnect(string $jnt[], string $IK[], string $FK[], string $type, string $controller)
{
if (!`attributeExists "FK_IK" $controller`)
addAttr -ln "FK_IK"  -at double  -min 0 -max 1 -dv 1 -keyable true $controller ;

if (`size $jnt`==`size $IK` && `size $jnt`==`size $FK`)
{
    if ($type == "utilNode")
    {
        for($i=0;$i<size($jnt);$i++)
        {
        $rotColorBlend = `createNode blendColors -n ($jnt[$i]+"_rot_cb")`;
        connectAttr -f ($IK[$i] + ".rotateX") ($rotColorBlend + ".color1R");
        connectAttr -f ($IK[$i] + ".rotateY") ($rotColorBlend + ".color1G");
        connectAttr -f ($IK[$i] + ".rotateZ") ($rotColorBlend + ".color1B");
        connectAttr -f ($FK[$i] + ".rotateX") ($rotColorBlend + ".color2R");
        connectAttr -f ($FK[$i] + ".rotateY") ($rotColorBlend + ".color2G");
        connectAttr -f ($FK[$i] + ".rotateZ") ($rotColorBlend + ".color2B");

        connectAttr -f ($rotColorBlend + ".outputR") ($jnt[$i] + ".rotateX");
        connectAttr -f ($rotColorBlend + ".outputG") ($jnt[$i] + ".rotateY");
        connectAttr -f ($rotColorBlend + ".outputB") ($jnt[$i] + ".rotateZ");
        connectAttr -f ($controller + ".FK_IK") ($rotColorBlend + ".blender");
				}
    }
    if ($type == "constrain")
    {
    $rev = `createNode reverse -n ($controller + "_IK_FK_rev")`;
    connectAttr -f ($controller + ".FK_IK") ($rev +".ix");

        for($i=0;$i<size($jnt);$i++)
        {
        $ikFkCon = `parentConstraint -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 $FK[$i] $IK[$i] $jnt[$i]`;
        connectAttr -f ($rev +".ox") ($ikFkCon[0] + ".w0");
        connectAttr -f ($controller + ".FK_IK") ($ikFkCon[0] + ".w1");
        }
    }
}
else
print ("array of ik-fk does not match");
}

/*   create all needed fk ik connections for given joint
     INPUTS:
        $jnt 				>> object to create fk ik connection ("joint1")
        $IK					>> ik joint hierarchy
        $FK					>> fk joint hierarchy
        $type       >> type of connection ("translate / scale")
        $controller >> object to create fk ik control attribute

 (i.e) cr_stretchTypeConnect("joint1", "IK_joint1", "FK_joint1", "utilNods", "fkIk_anim");
 */

global proc cr_stretchTypeConnect(string $jnt[], string $IK[], string $FK[], string $type, string $controller)
{
if (!`attributeExists "FK_IK" $controller`)
addAttr -ln "FK_IK"  -at double  -min 0 -max 1 -dv 1 -keyable true $controller ;

if (`size $jnt`==`size $IK` && `size $jnt`==`size $FK`)
{
    if ($type == "translate")
    {
        for($i=0;$i<size($jnt);$i++)
        {
        $transColorBlend = `createNode blendColors -n ($jnt[$i]+"_trans_cb")`;
        connectAttr -f ($IK[$i] + ".translateX") ($transColorBlend + ".color1R");
        connectAttr -f ($IK[$i] + ".translateY") ($transColorBlend + ".color1G");
        connectAttr -f ($IK[$i] + ".translateZ") ($transColorBlend + ".color1B");
        connectAttr -f ($FK[$i] + ".translateX") ($transColorBlend + ".color2R");
        connectAttr -f ($FK[$i] + ".translateY") ($transColorBlend + ".color2G");
        connectAttr -f ($FK[$i] + ".translateZ") ($transColorBlend + ".color2B");

        connectAttr -f ($transColorBlend + ".outputR") ($jnt[$i] + ".translateX");
        connectAttr -f ($transColorBlend + ".outputG") ($jnt[$i] + ".translateY");
        connectAttr -f ($transColorBlend + ".outputB") ($jnt[$i] + ".translateZ");
        connectAttr -f ($controller + ".FK_IK") ($transColorBlend + ".blender");
				}
    }
    if ($type == "scale")
    {
        for($i=0;$i<size($jnt);$i++)
        {
        $scaleColorBlend = `createNode blendColors -n ($jnt[$i]+"_scale_cb")`;
        connectAttr -f ($IK[$i] + ".scaleX") ($scaleColorBlend + ".color1R");
        connectAttr -f ($IK[$i] + ".scaleY") ($scaleColorBlend + ".color1G");
        connectAttr -f ($IK[$i] + ".scaleZ") ($scaleColorBlend + ".color1B");
        connectAttr -f ($FK[$i] + ".scaleX") ($scaleColorBlend + ".color2R");
        connectAttr -f ($FK[$i] + ".scaleY") ($scaleColorBlend + ".color2G");
        connectAttr -f ($FK[$i] + ".scaleZ") ($scaleColorBlend + ".color2B");

        connectAttr -f ($scaleColorBlend + ".outputR") ($jnt[$i] + ".scaleX");
        connectAttr -f ($scaleColorBlend + ".outputG") ($jnt[$i] + ".scaleY");
        connectAttr -f ($scaleColorBlend + ".outputB") ($jnt[$i] + ".scaleZ");
        connectAttr -f ($controller + ".FK_IK") ($scaleColorBlend + ".blender");
        }
    }
}
}
// this proc will return hierarchy for selected joint
global proc string[] cr_listHierarchy(string $n)
{
string $sel[];          // array to hold selected` objects
string $child[];        // array to hold all child
string $fullchains[];    //

    if ($n=="")
    $sel =`ls -sl`;
    else
    $sel[0] = $n;

    for($i=0;$i<size($sel);$i++)
    {
    $child = `listRelatives -allDescendents -path -type "joint" $sel`;

    $fullchains = stringArrayCatenate ($child,$sel);

    $fullchains = `cr_reverseArray $fullchains`;
    }
return $fullchains;

}

// proc from zooToolBox
global proc float[] zoofindPolePosition( string $startJoint, string $midJoint, string $endJoint, float $dist)
{
    string $temp[] = {};
    string $joint2 = $endJoint;
    string $joint1 = "";
    string $joint0 = "";

    if( `objExists $midJoint` ) $joint1 = $midJoint;
    else {
        string $parents[] = `listRelatives -p $joint2`;
        if( `size $parents` ) $joint1 = $parents[0];
        }
    if( `objExists $startJoint` ) $joint0 = $startJoint;
    else {
        string $parents[] = `listRelatives -p $joint1`;
        if( `size $parents` ) $joint0 = $parents[0];
        }

    if( !`objExists $joint0` ) return {};
    if( !`objExists $joint1` ) return {};
    if( !`objExists $joint2` ) return {};
    float $pos0[]=`xform -q -ws -rp $joint0`;
    float $pos1[]=`xform -q -ws -rp $joint1`;
    float $pos2[]=`xform -q -ws -rp $joint2`;
    float $midway[] = { ($pos2[0]+$pos0[0])/2, ($pos2[1]+$pos0[1])/2, ($pos2[2]+$pos0[2])/2 };
    float $dotA[] = { $pos2[0]-$pos0[0], $pos2[1]-$pos0[1], $pos2[2]-$pos0[2] };
    float $dotB[] = { $pos1[0]-$pos0[0], $pos1[1]-$pos0[1], $pos1[2]-$pos0[2] };
    float $lengthFactor = sqrt( $dotA[0]*$dotA[0] + $dotA[1]*$dotA[1] + $dotA[2]*$dotA[2] );
    float $projAB[] = `zooVectorProj $dotA $dotB`;
    float $multiplier = 1.0;
    float $int[] = {};
    float $sub[] = {};

    $sub = { $pos0[0]+$projAB[0], $pos0[1]+$projAB[1], $pos0[2]+$projAB[2] };
    $sub = { $pos1[0]-$sub[0], $pos1[1]-$sub[1], $pos1[2]-$sub[2] };
    $dist *= $lengthFactor; 
    float $mag = sqrt( $sub[0]*$sub[0] + $sub[1]*$sub[1] + $sub[2]*$sub[2] );

    if( $mag < 0.00001 ) return $pos1; 
    else $multiplier = $dist/$mag;
    $int[0] = $midway[0] + $sub[0]*$multiplier;
    $int[1] = $midway[1] + $sub[1]*$multiplier;
    $int[2] = $midway[2] + $sub[2]*$multiplier;

    return $int;
}

//returns the vector found by projecting vecB onto vecA
global proc float[] zooVectorProj( float $vecA[], float $vecB[] )
{
    float $a[] = $vecA;
    float $b[] = $vecB;
    float $magA = `zooVectorMag $a`;
    float $dot = `dotProduct $a $b 0`;
    $magA = `pow $magA 2`;
    $magA = $dot/$magA;

    return { $vecA[0]*$magA, $vecA[1]*$magA, $vecA[2]*$magA };
}


global proc float zooVectorMag( float $vec[] )
{
    float $mag = `pow $vec[0] 2` + `pow $vec[1] 2` + `pow $vec[2] 2`;
    return `sqrt $mag`;
}

/*
    This proc will create Fk controls for selecte joint

    INPUTS:
        $n        >> object to create fk ik connection ("joint1")
        $ctrlType >> type of curve control

		REQUIRES:     cr_curveControl.mel, snap.mel
		(i.e) cr_fkControl("joint1", "circleOrient");
*/
global proc string[] cr_fkControl(string $n, string $ctrlType, int $zeroOut)
{
string $sel[];
string $FKCon[];
string $FKAnim[];
string $grp[];
    if ($n=="")
    $sel =`ls -sl`;
    else
    $sel[0] = $n;

$FKCon = `cr_listHierarchy $sel[0]`;
$FKAnim = `cr_dupId $FKCon[0] "suffix" "ctrl"`;
int $size = `size($FKCon)`;
    for($i=0;$i<$size;$i++)
    {
		cr_shapeParent($FKAnim[$i], $ctrlType);
        catchQuiet(`setAttr($FKAnim[$i]+".radius") 0`);
    $ikFkCon = `parentConstraint -weight 1 $FKAnim[$i] $FKCon[$i]`;
    connectAttr ($FKAnim[$i]+".scale") ($FKCon[$i]+".scale");
    if($zeroOut)
		{
		$grp = `cr_quickZeroOut $FKAnim[$i]`;
        cr_lockAndHide $grp[0] lock "trans rot scale vis";
		}
   	select -cl;
    }
if($zeroOut) for($x=0;$x<($size-1);$x++)connectAttr ($FKAnim[$x]+".scale") ($FKAnim[$x+1]+".inverseScale");
return $FKAnim;
}

// to get different type of selection from selected objects
global proc selectionType(string $type, string $cmd)
{
string $select[] = `ls -sl`;
select -cl;
int $evenIndex = 0;
int $oddIndex = 1;

if ( $type == "even" )
    {
    for ($i=0;$i<(size($select)/2);$i++)
        {
        select -toggle $select[$evenIndex];
        int $even = ($evenIndex + 2);
        $evenIndex = $even ;
        eval ($cmd);
        print  ("/n"+$evenIndex);
        }
    }
else if ( $type == "odd" )
    {
    for ($i=0;$i<(size($select)/2);$i++)
        {
        select -toggle $select[$oddIndex];
        int $odd = ($oddIndex + 2);
        $oddIndex = $odd ;
        eval ($cmd);
        print ("/n"+$oddIndex);
        }
    }
}

// This little proc return child of selected joint
global proc string cr_getChildJoint(string $n)
{

string $sel[];
string $temp[0];

	if ($n=="")
		$sel =`ls -sl`;
	else
		$sel[0] = $n;

	if (`nodeType $sel[0]` == "joint")
		{
		$temp = `listRelatives -children -path -typ "joint" $sel[0]`;

		if ($temp[0] == "")
			print ("\nNo child found on specified joint\n");
		}
	else
	print ("Selected object is not Joint");

return $temp[0];
}

/*
This little proc help you lock n unlock tranfrom attributes
INPUTS
			$n 				= specified object or selected objects
			$mode			= lock / unlock / cr_locknHide
			$channels = specify channels "trans rot scale"
*/
global proc cr_lockAndHide(string $n, string $mode, string $channels)
{
	string $flags[];
	string $sel[];
	// check for selection
	 if ($n=="")
        $sel =`ls -sl`;
   else
    		$sel[0] = $n;
   // get flag value
       tokenize $channels " " $flags;
for($i=0;$i<size($flags);$i++)
{
	if($mode == "lock")
	{
			if($flags[$i] == "trans")
    	{
			setAttr -lock true  ($n + ".tx");
			setAttr -lock true  ($n + ".ty");
			setAttr -lock true  ($n + ".tz");
     	}
  		else if($flags[$i] == "rot")
    	{
			setAttr -lock true  ($n + ".rx");
			setAttr -lock true  ($n + ".ry");
			setAttr -lock true  ($n + ".rz");
      }
  		else if($flags[$i] == "scale")
      {
			setAttr -lock true  ($n + ".sx");
			setAttr -lock true  ($n + ".sy");
			setAttr -lock true  ($n + ".sz");
      }
   		else if($flags[$i] == "vis")
      {
			setAttr -lock true  ($n + ".v");
      }
	}

	else if($mode == "cr_locknHide")
	{
			if($flags[$i] == "trans")
     	{
			setAttr -lock true -keyable false ($n + ".tx");
			setAttr -lock true -keyable false ($n + ".ty");
			setAttr -lock true -keyable false ($n + ".tz");
      }
   		else if($flags[$i] == "rot")
      {
			setAttr -lock true -keyable false ($n + ".rx");
			setAttr -lock true -keyable false ($n + ".ry");
			setAttr -lock true -keyable false ($n + ".rz");
      }
  		else if($flags[$i] == "scale")
      {
			setAttr -lock true -keyable false ($n + ".sx");
			setAttr -lock true -keyable false ($n + ".sy");
			setAttr -lock true -keyable false ($n + ".sz");
      }
   		else if($flags[$i] == "vis")
      {
			setAttr -lock true -keyable false ($n + ".v");
      }
  }

	else if($mode == "unLock")
	{
    	if($flags[$i] == "trans")
     	{
			setAttr -lock false -keyable true ($n + ".tx");
			setAttr -lock false -keyable true ($n + ".ty");
			setAttr -lock false -keyable true ($n + ".tz");
      }
    	else if($flags[$i] == "rot")
      {
			setAttr -lock false -keyable true ($n + ".rx");
			setAttr -lock false -keyable true ($n + ".ry");
			setAttr -lock false -keyable true ($n + ".rz");
      }
    	else if($flags[$i] == "scale")
      {
			setAttr -lock false -keyable true ($n + ".sx");
			setAttr -lock false -keyable true ($n + ".sy");
			setAttr -lock false -keyable true ($n + ".sz");
      }
    	else if($flags[$i] == "vis")
      {
			setAttr -lock false -keyable true ($n + ".v");
      }
  }

}
}

//This proc creates distance connection for specified joint
global proc string[] cr_createDistance(string $startJoint, string $endJoint)
{
string $return[];

float $startPos[];
float $endPos[];

// get worldSpace value in order to get exact position of selected joint
$startPos	= `xform -q -worldSpace -rotatePivot $startJoint`;
$endPos 	= `xform -q -worldSpace -rotatePivot $endJoint`;

// create dummy locators
$tmpLoc1 = `spaceLocator -name ($startJoint + "_start_loc")`;
$tmpLoc2 = `spaceLocator -name ($startJoint + "_end_loc")`;

// snap locators to respective joints
move -a -ws $startPos[0] $startPos[1] $startPos[2] $tmpLoc1[0];
move -a -ws $endPos[0] $endPos[1] $endPos[2] $tmpLoc2[0];

$dimensionNode = `createNode distanceDimShape`;
connectAttr ($tmpLoc1[0] + ".worldPosition[0]") ($dimensionNode + ".startPoint");
connectAttr ($tmpLoc2[0] + ".worldPosition[0]") ($dimensionNode + ".endPoint");

//rename distance dimension node
$dimensionParent = `listRelatives -parent $dimensionNode`;
$newName = `rename $dimensionParent ($startJoint +"_distance")`;

$return[0] = $newName;		//distance node
$return[1] = $tmpLoc1[0];	//start locator
$return[2] = $tmpLoc2[0];	//end locator

return $return;
}


// This little proc return length joint chain
global proc float cr_getChainLength(string $startJoint, string $endJoint)
{
string $temp[];
float $dis = 0.0;
string $shape[];
string $child;
string $list[] = `cr_findJointArrey $startJoint $endJoint`;
int $size = `size $list`;

	if ($size == 1)
		print ("\nNot enough value\n");

	else
	{
	for($i=0;$i<($size-1);$i++)
		{
		$child = `cr_getChildJoint $list[$i]`;
		$temp = `cr_createDistance $list[$i] $child`;
		$shape = `listRelatives -s $temp[0]`;
		$dis += `getAttr ($shape[0]+".distance")`;
		delete $temp;
		}
	}
return $dis;
}

global proc string[] cr_getStretchAxis(string $obj, string $type)
{
string $stretchAxis[3];
string $child;
float $axis[];
$axis = `getAttr ($obj+".t")`;

if($type == "scale")
{
if ((abs($axis[0])> abs($axis[1])) && (abs ($axis[0])>abs ($axis[2])))
   $stretchAxis = {"sx","sy","sz"};
else if ((abs($axis[1])> abs($axis[0])) && (abs ($axis[1])>abs ($axis[2])))
   $stretchAxis = {"sy","sz","sx"};
else if ((abs($axis[2])> abs($axis[1])) && (abs ($axis[2])>abs ($axis[0])))
   $stretchAxis = {"sz","sx","sy"};
else
    $stretchAxis = {"sx","sy","sz"};
}
else if ($type == "translate")
{
if ((abs($axis[0])> abs($axis[1])) && (abs ($axis[0])>abs ($axis[2])))
   $stretchAxis = {"tx","ty","tz"};
else if ((abs($axis[1])> abs($axis[0])) && (abs ($axis[1])>abs ($axis[2])))
   $stretchAxis = {"ty","tz","tx"};
else if ((abs($axis[2])> abs($axis[1])) && (abs ($axis[2])>abs ($axis[0])))
   $stretchAxis = {"tz","tx","ty"};
else
    $stretchAxis = {"tx","ty","tz"};
}
    return $stretchAxis ;
}

global proc string[] cr_findJointArrey(string $startJoint, string $endJoint)
{

int $i = 1;
int $redFlag = 0;
string $fullChain[];
$fullChain[0] = $endJoint; //first joint in the array will be the last joint

	while ($redFlag == 0) //loop through the joints until the current joint is the last joint
	{
	string $temp[] = `listRelatives -p -type "joint" $fullChain[$i-1]`;
	$fullChain[$i] = $temp[0];

		if ($fullChain[$i] == $startJoint)
		$redFlag = 1;
		else if ($fullChain[$i] == "")
		error ($startJoint + " " + $endJoint + " are not in same hierarchy");

	$i++;
	}

$fullChain = `cr_reverseArray $fullChain`;
return $fullChain;
}

global proc cr_parentSkeletonTo(string $node, string $parent)
{
int $i = 1;
int $redFlag = 0;
string $fullChain[];
$fullChain[0] = $node; 
while ($redFlag == 0) 
    {
    if ($fullChain[$i-1]!="")
        {
        string $imdParent[] = `listRelatives -p -pa $fullChain[$i-1]`;
        $fullChain[$i] = $imdParent[0];
        }
    if ($fullChain[$i] == $parent)
        $redFlag = 1;
    if ($fullChain[$i] == "")
        {
        parent($fullChain[$i-1], $parent);
        $redFlag = 1;
        }
    $i++;
    }
select -cl;
}

global proc string[] cr_getTwistAxis(string $obj)
{
string $twistAxis[3];
string $child;
float $axis[];
$child = `cr_getChildJoint $obj`;
$axis = `getAttr ($child+".t")`;

if ((abs($axis[0])> abs($axis[1])) && (abs ($axis[0])>abs ($axis[2])))
   $twistAxis = {"rx","rz","ry"};
else if ((abs($axis[1])> abs($axis[0])) && (abs ($axis[1])>abs ($axis[2])))
   $twistAxis = {"ry","rz","rx"};
else if ((abs($axis[2])> abs($axis[1])) && (abs ($axis[2])>abs ($axis[0])))
   $twistAxis = {"rz","rx","ry"};
else
    $twistAxis = {"rx","rz","ry"};

return $twistAxis ;
}

global proc string cr_curveGuide(string $startPos, string $endPos)
{
string $nonScaleGrp = "non_scale_grp";
string $partGrp = "cr_curveGuide_grp";

float $posA[] = `xform -q -worldSpace -rotatePivot $startPos`;
float $posB[] = `xform -q -worldSpace -rotatePivot $endPos`;
string $curve = `curve -d 1 -p $posA[0] $posA[1] $posA[2] -p $posB[0] $posB[1] $posB[2] -k 0 -k 1` ;
$curve = `rename $curve ($endPos + "Guide_crv")`;
setAttr ($curve + ".template") 1;

select -r ($curve + ".cv[0]");
string $posAClts[] = `cluster`;
select -r ($curve + ".cv[1]");
string $posBClts[] = `cluster`;
hide $posAClts $posBClts;
setAttr -lock true ($posAClts[1] + ".v");
setAttr -lock true ($posBClts[1] + ".v");
parent $posAClts[1] $startPos;
parent $posBClts[1] $endPos;

	if (!`objExists $nonScaleGrp`)
		$nonScaleGrp = `group -em -n "non_scale_grp"`;
	if (!`objExists $partGrp`)
		{
		$partGrp = `group -em -n "cr_curveGuide_grp"`;
		parent $partGrp $nonScaleGrp;
		}
	parent $curve $partGrp;
return $curve;
}

global proc string cr_jointCurve(string $startJoint, string $endJoint)
{
string $noJoint[] = `cr_findJointArrey $startJoint $endJoint`;

string $cmd = "curve -d 3";
for ($i=0;$i<size($noJoint);$i++)
  {
  float $cvPos[] = `xform -q -worldSpace -rotatePivot $noJoint[$i]`;
  $cmd += (" -ep " + $cvPos[0] + " "+ $cvPos[1] + " "+ $cvPos[2]);
  }
string $curve = `evalEcho $cmd`;
rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 2 -kcp 0 -kep 1 -kt 0 -s 0 -d 3 -tol 0.01 $curve;
return $curve;
}

global proc string[] cr_jointsOnCurve(string $curve, string $orientAxis, string $upAxis, int $numJoints, string $name)
{
select -cl;
string $curveInfo = `pointOnCurve -constructionHistory 1 $curve`;
setAttr ($curveInfo + ".turnOnPercentage") 1;

int $i = 0;
string $joints[];
for ($i; $i<=$numJoints; $i++)
	{
	float $parameter = $i * (1.0/$numJoints);
	setAttr ($curveInfo + ".parameter") $parameter;
	float $position[] = getAttr ($curveInfo + ".position");
	$joints[$i] = `joint -position $position[0] $position[1] $position[2] -n ($name+($i+1)+"_jnt")`;
	}
delete $curveInfo;
joint -e -oj $orientAxis -secondaryAxisOrient $upAxis -ch -zso $joints;
return $joints;
}

global proc string cr_getParent(string $object)
{
string $parent[] = `listRelatives -parent $object`;
return $parent[0];
}

global proc cr_transferConnection(string $master, string $slave, string $attr)
{
string $transConnection[] = `listConnections -d off -s on -plugs on -skipConversionNodes off ($master + "." + $attr)`;
	if($transConnection[0] != "")
	{
	connectAttr ($transConnection[0]) ($slave + "." + $attr);
	disconnectAttr ($transConnection[0]) ($master + "." + $attr);
	}
}

global proc cr_connectMirrorTrans(string $obj1, string $obj2, int $axis)
{
string $aAxisStr[] = {"x", "y", "z"};
string $axisStr = ".t"+$aAxisStr[$axis];

string $revNode = `createNode plusMinusAverage -n ($obj2+"MirrorTrans_pma")`;
setAttr ($revNode+".operation") 2;
setAttr ($revNode+".input1D[0]") 0;
connectAttr -f ($obj1+$axisStr) ($revNode+".input1D[1]");
connectAttr -f ($revNode+".output1D") ($obj2+$axisStr);
}


global proc cr_connectMirrorRot(string $obj1, string $obj2, int $axis)
{
string $aAxisStr[] = {"x", "y", "z"};
string $axisStr = ".r"+$aAxisStr[$axis];

string $revNode = `createNode plusMinusAverage -n ($obj2+"MirrorRot_pma")`;
setAttr ($revNode+".operation") 2;
setAttr ($revNode+".input1D[0]") 0;
connectAttr -f ($obj1+$axisStr) ($revNode+".input1D[1]");
connectAttr -f ($revNode+".output1D") ($obj2+$axisStr);
}

global proc string cr_makeFootHeelPivots(string $ankleJoint, string $ballJoint)
{
select -cl;
string $tempLoc[] = `cr_curveControl grp curve`;
	$tempLoc[0] = `rename ($ballJoint+"Pos_loc")`;
string $heelJnt[] = `cr_curveControl loc curve`;
	$heelJnt[0] = `rename ($ankleJoint+"Heel_loc")`;
string $bankInJnt[] = `cr_curveControl loc curve`;
	$bankInJnt[0] = `rename ($ballJoint+"InPos_loc")`;
string $bankOutJnt[] = `cr_curveControl loc curve`;
	$bankOutJnt[0] = `rename ($ankleJoint+"OutPos_loc")`;

string $endJoint = cr_getChildJoint($ballJoint);

parent $heelJnt $bankInJnt $bankOutJnt $tempLoc[0];

float $ankleJntXform[] = `xform -q -ws -t $ankleJoint`;
float $ballJntXform[] = `xform -q -ws -t $ballJoint`;

setAttr ($tempLoc[0]+".t") $ballJntXform[0] $ballJntXform[1] $ballJntXform[2];
string $tempCon[] = `aimConstraint -o 0 0 0 -w 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $endJoint $tempLoc[0]`;
delete $tempCon[0];

setAttr ($heelJnt[0]+".tz") (($ankleJntXform[2] - $ballJntXform[2])*1.4);
setAttr ($bankInJnt[0]+".tx")(($ankleJntXform[2] - $ballJntXform[2])*0.7);
setAttr ($bankOutJnt[0]+".tx") (($ankleJntXform[2] - $ballJntXform[2])*-0.7);

addAttr -ln "heelPos"  -dt "string" $ankleJoint;
setAttr -type "string" ($ankleJoint + ".heelPos") $heelJnt[0];

addAttr -ln "bankInPos"  -dt "string" $ballJoint;
setAttr -type "string" ($ballJoint + ".bankInPos") $bankInJnt[0];

addAttr -ln "bankOutPos"  -dt "string" $ballJoint;
setAttr -type "string" ($ballJoint + ".bankOutPos") $bankOutJnt[0];
select -cl;

return $tempLoc[0];
}

global proc vector[] cr_getQuadFlexLegJointPos(string $startJoint, string $endJoint)
{
string $temp[] = `cr_createDistance $startJoint $endJoint`;
string $shape[] = `listRelatives -s $temp[0]`;
float $dis = `getAttr ($shape[0]+".distance")`;
delete $temp;

string $startLoc[] = `cr_curveControl loc curve`;
string $endLoc[] = `cr_curveControl loc curve`;
string $midALoc[] = `cr_curveControl loc curve`;
string $midBLoc[] = `cr_curveControl loc curve`;

snap($startJoint, $startLoc[0]);
snap($endJoint, $endLoc[0]);

string $aimCon[] = `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 -1 0 -upVector 0 0 1 -worldUpType "vector" -worldUpVector 0 1 0 $endJoint $startLoc[0]`;
delete $aimCon[0];

float $midDis = ($dis/3);

parent $endLoc[0] $midALoc[0] $midBLoc[0] $startLoc[0];
setAttr ($midALoc[0]+".r") 0 0 0;
setAttr ($midALoc[0]+".tx") 0;
setAttr ($midALoc[0]+".ty") ($midDis*-1);
setAttr ($midALoc[0]+".tz") ($midDis);

setAttr ($midBLoc[0]+".r") 0 0 0;
setAttr ($midBLoc[0]+".tx") 0;
setAttr ($midBLoc[0]+".ty") ($midDis*-2);
setAttr ($midBLoc[0]+".tz") ($midDis*-1);

vector $jointPos[];
vector $tempPos1 = `xform -q -worldSpace -rotatePivot $startLoc[0]`;
vector $tempPos2 = `xform -q -worldSpace -rotatePivot $midALoc[0]`;
vector $tempPos3 = `xform -q -worldSpace -rotatePivot $midBLoc[0]`;
vector $tempPos4 = `xform -q -worldSpace -rotatePivot $endLoc[0]`;
$jointPos[0] = $tempPos1;
$jointPos[1] = $tempPos2;
$jointPos[2] = $tempPos3;
$jointPos[3] = $tempPos4;

delete $endLoc[0] $midALoc[0] $midBLoc[0] $startLoc[0];

return $jointPos;
}

global proc string[] cr_quickZeroOut(string $n)
{
string $s[];
string $zeros[] ;
string $strip;

if($n=="")
	$s =`ls -sl`;
else
	$s[0] = $n;

string $node ;
for($node in $s)
	{
	// Make an uppercased version of the node name
	int $len = size($node) ;
	string $Node = $node ;
	string $cap = toupper( substring($node, 1, 1) ) ;
	if($len > 1)
		{
		string $end = substring($node, 2, $len) ;
		$Node = $cap + $end ;
		$strip = `objGetPrefix $Node`;
		int $size = size($strip);
		if ($size > 1) $Node = $strip;
		}
	else
		$Node = $cap ;

	// Make zero grp
	string $name = ("frz"+$Node+"_grp") ;
	int $num=1;
	while (objExists($name))  // find unique name
		{
		++$num;
		$name = ("frz"+$Node+$num+"_grp") ;
		}
	string $grp = `group -em -w -n $name` ;

	string $parents[] = `listRelatives -parent $node` ;
	if(size($parents) > 0)
		parent $grp $parents[0] ;

	// Now, duplicate node ( inserting it into the heirarchy)
	string $dupe[] = `duplicate -rr -rc $node `;
	$dupe[0]=`rename $dupe[0] ("frz"+$Node+"_grp")`;

	// And do a NDSsnap..
	ndsSnap($dupe[0], $grp) ;

	// delete dupe...
	delete $dupe ;

	// parent our node to the grp
	string $parentedNode[0] = `parent $node $grp`;

	$zeros[size($zeros)] = $grp ;
	}

// re select nodes
select -r $s ;

// return the ZERO grp
return $zeros ;
}

global proc string[] cr_quickJointZeroOut(string $n)
{
	string $s[];
	string $zeros[] ;
	string $strip;
	string $grp;

	if($n=="")
		$s =`ls -sl`;
	else
		$s[0] = $n;

string $node ;
for($node in $s)
	{
	// Make an uppercased version of the node name
	int $len = size($node) ;
	string $Node = $node ;
	string $cap = toupper( substring($node, 1, 1) ) ;
	if($len > 1)
		{
		string $end = substring($node, 2, $len) ;
		$Node = $cap + $end ;
		$strip = `objGetPrefix $Node`;
		int $size = size($strip);
		if($size > 1) $Node = $strip;
		}
	else
		$Node = $cap ;

	// Make zero grp
	string $name = ("frz"+$Node+"_grp") ;
	int $num=1;
	while(objExists($name))  // find unique name
		{
		++$num;
		$name = ("frz"+$Node+$num+"_grp") ;
		}
	select -cl;
	$grp = `joint -n $name`;
	setAttr ($grp + ".radius") 0;
	snap $node $grp;
	makeIdentity -apply true -t 0 -r 1 -s 0 $grp;

	string $parents[] = `listRelatives -parent $node` ;
	if(size($parents) > 0)
		parent $grp $parents[0] ;

	// parent our node to the grp
	string $parentedNode[0] = `parent $node $grp`;

	$zeros[size($zeros)] = $grp ;
	}
// return the ZERO grp
return $zeros ;
}

global proc string cr_getcharRigInfoNode(string $name)
{
string $nonScaleGrp = ($name+"non_scale_grp");

if (!`objExists $nonScaleGrp`)
	{
	warning ("The rig group \""+$nonScaleGrp+"\" doesn't exist.  Unable to proceed.");
	return "";
	}

string $charInfo[] = `listRelatives -ad -type geometryVarGroup $nonScaleGrp`;
if (size($charInfo) == 1)
	return $charInfo[0];
else
	{
	// create the charVars node
	string $charInfoNode = `createNode geometryVarGroup -n ($name +"charRigInfo") -p $nonScaleGrp`;
	string $rigAuthor = `getenv USER`;
	string $setupVersion = "1.0";
	string $date = `about -cd`;

	addAttr -ln setupWithVersion -dt "string" $charInfoNode ;
	addAttr -ln rigAuthor -dt "string" $charInfoNode ;
	addAttr -ln date -dt "string" $charInfoNode ;
	setAttr -l 1 -type "string" ( $charInfoNode +".rigAuthor" ) $rigAuthor;
	setAttr -l 1 -type "string" ( $charInfoNode +".setupWithVersion" ) $setupVersion;
	setAttr -l 1 -type "string" ( $charInfoNode +".date" ) $date;
	return $charInfoNode;
	}
}

global proc string[] cr_rigSideSep(string $obj)
{
//string $obj = "none";
string $ret[]= {};

if ($obj == "")
	return $ret;

string $parts[];
int $cnt = tokenize($obj, "/", $parts);

	if ($cnt <= 1)
		$ret[0] = $obj;
	else
		{
		$ret[0] = ($parts[($cnt-2)]+ "_");
		$ret[1] = ($parts[($cnt-1)]+ "_");
		}
return $ret;
}

global proc int[] cr_getFingerAxisFigures(string $obj)
{
/*
x=1 y=2 z=3
1 element = spin
2 element = curl
3 element = spread
4 element = stretch
*/
int $fingerAxis[];
string $rotAxis[] = cr_getTwistAxis($obj);
if($rotAxis[0] == "rx")
$fingerAxis = {1,3,2,1};
else if($rotAxis[0] == "ry")
$fingerAxis = {2,3,1,1};
else if($rotAxis[0] == "rz")
$fingerAxis = {3,1,2,1};

return $fingerAxis;
}

global proc cr_toggleBaseSkeletonSelect()
{
string $baseSkeleton = "skeletons_grp";
if(objExists($baseSkeleton))
    {
    int $state = getAttr($baseSkeleton+".ove");
    setAttr($baseSkeleton+".ove") (1-$state);
    }
}

global proc string cr_createSkinJointSet(string $prefix)
{
if(!`objExists ($prefix+"SkinJoints_set")`)
    sets -n ($prefix+"SkinJoints_set");
return ($prefix+"SkinJoints_set");
}

global proc cr_addSkinJointToSet(string $set, string $jointList[])
{
if(`objExists $set`)
    {    
    for($i = 0; $i < size($jointList); $i++){
        sets -e -add $set $jointList[$i];}
    }
}

global proc cr_selectSkinJoints()
{
if(`objExists "*SkinJoints_set"`)
    {
    string $members[] = `sets -q "*SkinJoints_set"`;
    select -r $members;
    }
else
    error "SkinJoints_set does not exists.";
}